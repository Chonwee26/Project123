<!doctype html>
<html lang="en">

<head>
    <title>Document Picture-in-Picture API Example</title>
    <script src="main.js" async></script>
    <link href="main.css" rel="stylesheet">
    <style>
        #miniPlayer {
  width: 400px;
  font:
    14px "Open Sans",
    sans-serif;
}

#credits {
  padding: 0 0 10px 0;
  font:
    italic 10px "Open Sans",
    sans-serif;
}

#in-pip-message {
  display: none;
}

@@media (display-mode: picture-in-picture) and (prefers-color-scheme: light) {
	body {
		background: antiquewhite;
	}
}

@@media (display-mode: picture-in-picture) and (prefers-color-scheme: dark) {
	body {
		background: #333;
	}

	a {
		color: antiquewhite;
	}
}
    </style>
</head>

<body>
    <div id="miniPlayer">
        <h1>Document Picture-in-Picture API Example</h1>
        <div id="miniPlayercontainer">
            <p id="in-pip-message">Video player is currently in the separate Picture-in-Picture window.</p>
            <div id="miniPlayerMedia">
                <img src="~/picture/Spotify Image/music_pic3_yanagi.jpg" />
                <audio  id="audio" controls>
                   <source  src="/uploads/Aimer/Album_4015/Sign.mp3" type="audio/mp3" />
                </audio>

                <div id="credits">
                   
                </div>

                <div id="controlbar">
                    <p class="no-picture-in-picture">
                        Document Picture-in-Picture API not available
                    <p> 
                </div>
            </div>
        </div>
    </div>
    <script>
        function bindingminiPlayer(){

        }
    const videoPlayer = document.getElementById("miniPlayerMedia");
const playerminiPlayercontainer = document.getElementById("miniPlayercontainer");

const inPipMessage = document.getElementById("in-pip-message");

if ("documentPictureInPicture" in window) {
  document.querySelector(".no-picture-in-picture").remove();

  const togglePipButton = document.createElement("button");
  togglePipButton.textContent = "Toggle Picture-in-Picture";
  togglePipButton.addEventListener("click", togglePictureInPicture, false);

  document.getElementById("controlbar").appendChild(togglePipButton);
}

async function togglePictureInPicture() {
  // Early return if there's already a Picture-in-Picture window open
  if (window.documentPictureInPicture.window) {
    inPipMessage.style.display = "none";
    playerminiPlayercontainer.append(videoPlayer);
    window.documentPictureInPicture.window.close();
    return;
  }

  // Open a Picture-in-Picture window.
  const pipWindow = await window.documentPictureInPicture.requestWindow({
    width: videoPlayer.clientWidth,
    height: videoPlayer.clientHeight + 50,
  });

  // Add pagehide listener to handle the case of the pip window being closed using the browser X button
  pipWindow.addEventListener("pagehide", (event) => {
    inPipMessage.style.display = "none";
    playerminiPlayercontainer.append(videoPlayer);
  });

  // Copy style sheets over from the initial document
  // so that the player looks the same.
  [...document.styleSheets].forEach((styleSheet) => {
    try {
      const cssRules = [...styleSheet.cssRules]
        .map((rule) => rule.cssText)
        .join("");
      const style = document.createElement("style");

      style.textContent = cssRules;
      pipWindow.document.head.appendChild(style);
    } catch (e) {
      const link = document.createElement("link");

      link.rel = "stylesheet";
      link.type = styleSheet.type;
      link.media = styleSheet.media;
      link.href = styleSheet.href;
      pipWindow.document.head.appendChild(link);
    }
  });

  // Move the player to the Picture-in-Picture window.
  pipWindow.document.body.append(videoPlayer);

  // Display a message to say it has been moved
  inPipMessage.style.display = "block";
}

documentPictureInPicture.addEventListener("enter", (event) => {
  const pipWindow = event.window;
  console.log("Video player has entered the pip window");

  const pipMuteButton = pipWindow.document.createElement("button");
  pipMuteButton.textContent = "Mute";
  pipMuteButton.addEventListener("click", () => {
    const pipVideo = pipWindow.document.querySelector("#video");
    if (!pipVideo.muted) {
      pipVideo.muted = true;
      pipMuteButton.textContent = "Unmute";
    } else {
      pipVideo.muted = false;
      pipMuteButton.textContent = "Mute";
    }
  });

  pipWindow.document.body.append(pipMuteButton);
});
    </script>
</body>

</html>