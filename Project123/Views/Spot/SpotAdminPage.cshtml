@{
    Layout = "~/Views/Shared/_SpotLayout.cshtml";
}
@section Styles{
    <style type="text/css">
        .content {
            border-radius: 20px;
            height: calc(100vh - 75px);
            width: 100%;
        }

        .main-content {
            background-color: #0e0d0d;
            margin-right: 10px;
            padding: 15px;
            background-image: linear-gradient(#762676a8, #0e0d0d);
            overflow-y: auto;
        }

        .aside {
            display: flex;
            background-color: #262626;
            padding: 15px;
            overflow-y: auto;
            color: white;
        }

        .main-content-music {
            margin-top: 100px;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .music-content {
            padding-top: 12px;
            display: flex !important;
            justify-content: center;
            align-content: space-between;
            flex-direction: column;
        }

        .music-content-title {
            align-items: baseline !important;
        }

        .img-music-content,
        .img-aside {
            display: flex !important;
            justify-content: center;
            width: 100%;
            height: auto;
            max-width: 205px;
        }

        .img-aside {
            max-height: 388px;
            max-width: 388px;
        }

        .img-aside-content,
        .aside-content {
            display: flex !important;
            justify-content: center;
            flex-direction: column;
        }

        .music-content:hover {
            background-color: #8f2c8fa8; /* or any color you prefer */
        }

        .music-content:active {
            background-color: black;
        }
        #dvTableSong #tblDataTableSong th,tr ,td{
            color: white !important;
            background-color: black !important;
            border:none!important;
        }

        #dvTableAlbum #tblDataTableAlbum th, tr, td {
            color: white !important;
            background-color: black !important;
            border: none !important;
        }

        table.dataTable thead .sorting_asc{
           background-image:none!important;
        }
        .btn-edit-album,.btn-delete,btn-edit-song{
            cursor:pointer;
        }

     
    </style>
}

<nav>
    <div class="nav nav-tabs" id="nav-tab" role="tablist" hidden>
        <button class="nav-link active" id="searchTab" data-bs-toggle="tab" data-bs-target="#nav-home" type="button" role="tab" aria-controls="nav-home" aria-selected="true">Search</button>
        <button class="nav-link" id="albumTab" data-bs-toggle="tab" data-bs-target="#nav-album" type="button" role="tab" aria-controls="nav-album" aria-selected="false">Album</button>
        <button class="nav-link" id="songTab" data-bs-toggle="tab" data-bs-target="#nav-song" type="button" role="tab" aria-controls="nav-song" aria-selected="false">Song</button>
    </div>
</nav>
<div class="tab-content" id="nav-tabContent">
    <div class="tab-pane fade show active" id="nav-home" role="tabpanel" aria-labelledby="nav-home-tab">
        <div class="d-flex container-fluid content">
            <div class="content main-content">
                <div>
                    <h1 style="color:white">Add Song Page</h1>
                    @*<p>
            John Doe John Doe John Doe John Doe John Doe John Doe John Doe
            John Doe John Doe John Doe John Doe John Doe John Doe
            John Doe John Doe John Doe John Doe John Doe John Doe John Doe
        </p>*@
                    <div class="main-content-music row">

                        <form id="albumForm">
                            <div class="col-12">
                                <h3 style="color:white">Album</h3>

                                <div class="row">
                                    <div class="col-12 col-sm-12 col-md-6 ">
                                        <h6>Artist Name</h6>
                                        <div class="input-group">
                                            <input class="form-control" type="text" id="txtAlbumArtist" placeholder="Artist Name">
                                        </div>
                                    </div>

                                    <div class="col-12 col-sm-12 col-md-6 ">
                                        <h6>Album Name</h6>
                                        <div class="input-group">
                                            <input class="form-control" type="text" id="txtAlbumName" placeholder="Album Name">
                                        </div>
                                    </div>
                                </div>



                                <div class="row">
                                    <div class="col-12 col-sm-12 col-md-6 mt-2 ">
                                        <h6>Add Album Image</h6>
                                        <div class="input-group">
                                            <input class="form-control" type="file" id="fileAlbumImage" placeholder="Image URL">
                                        </div>
                                    </div>

                                    <div class="col-12 col-sm-12 col-md-6 mt-4">
                                        <div class="input-group" style=" width: 168px; height: 168px;">
                                            <img id="albumImagePreview" src="#" alt="Album Image Preview" style="display: none; width: 168px; height: 168px;" />
                                        </div>
                                    </div>
                                </div>

                                <div class="row" style="">
                                    <div class="col-8">
                                    </div>

                                    <div class="col-4 d-flex justify-content-end">
                                        <button class="btn btn-secondary me-3" type="button" onclick="createAlbum()">Create Album</button>
                                        <button class="btn btn-secondary" type="button" onclick="searchAlbum()">Search Album</button>
                                    </div>
                                </div>
                            </div>
                        </form>

                        <div class="col-12" id="dvTableAlbum" style="display:none">
                            <table id="tblDataTableAlbum" class="table table-bordered" width="100%">
                                <thead>
                                    <tr class=" ">
                                        <th>Edit</th>
                                        <th>#</th>
                                        <th>Album</th>
                                        <th>Artist</th>
                                        <th style="width:80px!important;">Delete</th>
                                    </tr>
                                </thead>

                                <tbody>
                                </tbody>
                            </table>
                        </div>

                        <form id="songForm">
                            <div class="col-12">
                                <h3 style="color:white">Song</h3>
                                <div class="row">
                                    <div class="col-12 col-sm-12 col-md-6 ">
                                        <h6>AlbumId</h6>
                                        <div class="input-group">
                                            <input class="form-control" type="text" id="txtSongAlbumId" placeholder="Album ID">
                                        </div>
                                    </div>

                                    <div class="col-12 col-sm-12 col-md-6 ">
                                        <h6>Artist Name</h6>
                                        <div class="input-group">
                                            <input class="form-control" type="text" id="txtSongArtist" placeholder="Artist Name">
                                        </div>
                                    </div>
                                </div>
                                <div class="row">

                                </div>
                                <div class="row">
                                    <div class="col-12 col-sm-12 col-md-6 mt-2">
                                        <h6>Song Name</h6>
                                        <div class="input-group">
                                            <input class="form-control" type="text" id="txtSongName" placeholder="Song Name">

                                        </div>
                                    </div>

                                    <div class="col-12 col-sm-12 col-md-6 mt-2 row">
                                        <h6>Add Song</h6>
                                        <div class=" col-6">
                                            <input class="form-control col-6" type="file" id="fileSongFile" placeholder="File URL">


                                        </div>
                                        <div class="col-6">
                                            <audio class="col-12" id="audiocontrolPreview" controls="" style="height:38px;display:none">
                                                <source id="songAudioPreview" src="blob:https://localhost:7166/8ff39aa5-6817-4e13-96b1-ee45a34f97c2" type="audio/mp3">
                                                Your brownser does not support this audio elemento
                                            </audio>
                                            <p id="duration"></p>
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-12 col-sm-12 col-md-6 ">
                                        <h6>Genres</h6>
                                        <div class="input-group">
                                            <input class="form-control" type="text" id="txtSongGenres" placeholder="Genres">

                                        </div>
                                    </div>

                                    <div class="col-12 col-sm-12 col-md-6 ">
                                        <h6>Song Image</h6>
                                        <div class="input-group">
                                            <input class="form-control" type="file" id="fileSongImage" placeholder="Song Image URL">

                                        </div>
                                    </div>
                                </div>
                                <input class="form-control" type="number" id="durationInput" placeholder="Duration input" hidden>
                                <img id="songImagePreview" src="#" alt="Song Image Preview" style="display: none; width: 168px; height: 168px; " />

                                <div class="row" style="">
                                    <div class="col-8">
                                    </div>
                                    <div class="col-4 d-flex justify-content-end mt-3">
                                        <button class="btn btn-secondary me-3" type="button" onclick="clearValue()">Clear Value</button>
                                        <button class="btn btn-secondary me-3" type="button" onclick="createSong()">Create Song</button>
                                        <button class="btn btn-secondary" type="button" onclick="searchSong()">Search Song</button>
                                    </div>
                                </div>

                                <div class="col-12" id="dvTableSong" style="display:none">
                                    <table id="tblDataTableSong" class="table table-bordered" width="100%">
                                        <thead>
                                            <tr class=" ">
                                                <th>Edit</th>
                                                <th>#</th>
                                                <th>Title</th>
                                                <th>Artist</th>
                                                <th>Album</th>
                                                <th>Duration</th>
                                                <th>Genres</th>
                                                <th>Delete</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="tab-pane fade" id="nav-album" role="tabpanel" aria-labelledby="nav-album-tab">
        <partial name="_SpotAdminAlbumView" />
    </div>
    <div class="tab-pane fade" id="nav-song" role="tabpanel" aria-labelledby="nav-song-tab">

        <partial name="_SpotAdminSongView" />
    </div>
</div>

        @section Scripts{
            <script>
                var duration;
                var audioControl;
                var audioDurationElement;
                var audioControlEdit;
                var audioDurationElementEdit;
                var durationEdit;
                var AlbumIdData
            /*    var rowDataEdit;*/

        $(document).ready(function () {
            audioControl = $('#audiocontrolPreview')[0];
            audioDurationElement = $('#duration');
            audioControlEdit = $('#audiocontrolPreviewEdit')[0];
            audioDurationElementEdit = $('#durationEdit');
        });
            //Edit section Start
                $('#fileSongImageEdit').change(function () {
                    showPreview(this, '#songImagePreviewEdit', 'image');
                });

                $('#btnCancelEdit').click(function () {
                    $(".nav button#searchTab").tab('show');
                });
                $('#fileSongFileEdit').change(function (e) {
                    var file = e.target.files[0];
                    var url = URL.createObjectURL(file);

                    $(audioControlEdit).on('loadedmetadata', function () {
                        durationEdit = audioControlEdit.duration;
                        var minutes = Math.floor(durationEdit / 60);
                        var seconds = Math.floor(durationEdit % 60);
                        var formattedSeconds = seconds < 10 ? '0' + seconds : seconds;
                        audioDurationElementEdit.text('Duration: ' + minutes + ':' + formattedSeconds);
                        $('#durationInputEdit').val(parseInt(durationEdit));
                    });

                    if ($('#fileSongFileEdit').val() != null) {
                        debugger
                        $('#songAudioPreviewEdit').attr('src', url);
                    } else {
                        $('#songAudioPreviewEdit').removeAttr('src');
                    }
                    audioControlEdit.load();
                    $('#audiocontrolPreviewEdit').show();
                });



                function EditSongSave() {
                    debugger
                    if (!durationEdit) {
                        alert("Please wait until the audio duration is loaded.");
                        return;
                    }

                    var formData = new FormData();
                    formData.append("AlbumId", $("#txtSongAlbumIdEdit").val());
                    formData.append("SongId", rowDataSong.SongId);
                    formData.append("ArtistName", $("#txtSongArtistEdit").val());
                    formData.append("SongName", $("#txtSongNameEdit").val());
                    formData.append("SongFile", $("#fileSongFileEdit")[0].files[0]);
                    formData.append("SongFilePath", rowDataSong.SongFilePath);
                    formData.append("SongGenres", $("#txtSongGenresEdit").val());
                    formData.append("SongImage", $("#fileSongImageEdit")[0].files[0]);
                    formData.append("SongImagePath", rowDataSong.SongImagePath);
                    formData.append("SongLength", $('#durationInputEdit').val());

                    console.log(durationEdit);
                    console.log(formData);

                    $.ajax({
                        url: '@Url.Action("UpdateSong1", "Spot")',
                        contentType: false,
                        type: 'POST',
                        processData: false,
                        data: formData,
                        success: function (result) {
                            alert('Edit saved successfully');
                        },
                        error: function (error) {
                            console.error(error);
                        }
                    });
                }

                $('#tblDataTableSong').on('click', '.btn-edit-song', function () {
                    SaveStatus = "Update";
                    rowDataSong = $('#tblDataTableSong').DataTable().row($(this).closest('tr')).data();

                    $('#txtSongAlbumIdEdit').val(rowDataSong.AlbumId == null || rowDataSong.AlbumId == undefined ? "" : rowDataSong.AlbumId);
                    $('#txtSongArtistEdit').val(rowDataSong.ArtistName);
                    $('#txtSongNameEdit').val(rowDataSong.SongName);
                    $('#txtSongGenresEdit').val(rowDataSong.SongGenres);
               //     /*      $('#fileSongFileEdit').val(rowData.SongFilePath);*/
               //     $('#audiocontrolPreviewEdit').val();
               ///*     $('#songAudioPreviewEdit').val(rowData.SongFilePath);*/
               //    /* $('#songAudioPreview').attr('src', rowData.SongFilePath);*/
               //     $('#durationEdit').val();
               //     $('#durationInputEdit').val();
               //     $('#fileSongImageEdit').val();
               //     $('#songImagePreviewEdit').val();

                    $(".nav button#songTab").tab('show');
                });


                $('#tblDataTableSong').on('click', '.btn-delete', function () {
                    SaveStatus = "Update";
                    rowDataSong = $('#tblDataTableSong').DataTable().row($(this).closest('tr')).data();


                    var formDataDelete = new FormData();
                    formDataDelete.append("AlbumId", rowDataSong.AlbumId);
                    formDataDelete.append("SongId", rowDataSong.SongId);
                    formDataDelete.append("ArtistName", rowDataSong.ArtistName);
                    formDataDelete.append("SongName", rowDataSong.SongName);

                    formDataDelete.append("SongFilePath", rowDataSong.SongFilePath);
                    formDataDelete.append("SongGenres", rowDataSong.SongGenres);

                    formDataDelete.append("SongImagePath", rowDataSong.SongImagePath);
                    formDataDelete.append("SongLength", rowDataSong.SongLength);


                    $.ajax({
                        url: '@Url.Action("DeleteSong1", "Spot")',
                        contentType: false,
                        type: 'POST',
                        processData: false,
                        data: formDataDelete,
                        success: function (result) {
                            alert('Delete Song successfully');
                        },
                        error: function (error) {
                            console.error(error);
                        }
                    });
                });

                //Edit section End


                $('#fileSongFile').change(function (e) {
                    var file = e.target.files[0];
                    var url = URL.createObjectURL(file);

                    $(audioControl).on('loadedmetadata', function () {
                        duration = audioControl.duration;
                        var minutes = Math.floor(duration / 60);
                        var seconds = Math.floor(duration % 60);
                        // Ensure seconds are displayed with two digits
                        var formattedSeconds = seconds < 10 ? '0' + seconds : seconds;
                        audioDurationElement.text('Duration: ' + minutes + ':' + formattedSeconds);
                        $('#durationInput').val(parseInt(duration));
                    });

                    if ($('#fileSongFile').val() != null) {
                        $('#songAudioPreview').attr('src', url);
                    }
                    else {
                        $('#songAudioPreview').removeAttribute('src')
                    }
                    audioControl.load(); // Reload audio player to apply the new source
                    $('#audiocontrolPreview').show();
                });

                $('#tblDataTableSongAlbum tbody').on('click', 'tr', function () {
                    var rowDataAlbum = $('#tblDataTableSongAlbum').DataTable().row(this).data();
                    debugger
                    if (rowDataAlbum) {
                        $('#songAudioPreview').attr('src', rowDataAlbum.SongFilePath);
                        // Load the new audio source
                        audioControl.load();
                        $('#audiocontrolPreview').show();
                        // Play the audio (optional)
                        // audioControl.play();
                    } else {
                        console.error('Row data is null or undefined');
                    }
                });

                $('#fileAlbumImage').change(function () {
                    showPreview(this, '#albumImagePreview', 'image');
                });

                $('#fileSongImage').change(function () {
                    showPreview(this, '#songImagePreview', 'image');
                });

                $('#btnCancel').click(function () {
                    $(".nav button#searchTab").tab('show');

                });

        function showPreview(input, previewSelector, type) {
            if (input.files && input.files[0]) {
                var reader = new FileReader();

                reader.onload = function (e) {
                    if (type === 'image') {
                        $(previewSelector).attr('src', e.target.result);
                        $(previewSelector).show();
                    }
                }
                reader.readAsDataURL(input.files[0]);
            }
                }

        function searchAlbum() {
            frmSearch = {
                AlbumName: $("#txtAlbumName").val(),
                ArtistName: $("#txtAlbumArtist").val(),
            }
             $.ajax({
     type: 'POST',
     url: '@Url.Action("SearchAlbum1", "Spot")',
     data: frmSearch,
     dataType: "json",
     success: function (result) {

         bindingTableAlbum(result.Data);
         /* bindingTable(result.Data); */
     },
     error: function (request, status, error) {
         console.log(error);
     }
 });
        }

        function searchSong() {
            frmSearch = {
                SongName: $("#txtSongName").val(),
                ArtistName: $("#txtSongArtist").val(),
                SongGenres: $("#txtSongGenres").val(),
                AlbumId: $("#txtSongAlbumId").val()
            }
            $.ajax({
                type: 'POST',
                url: '@Url.Action("SearchSong1", "Spot")',
                data: frmSearch,
                dataType: "json",
                success: function (result) {

                    bindingTableSong(result.Data);
                    /* bindingTable(result.Data); */
                },
                error: function (request, status, error) {
                    console.log(error);
                }
            });
        }

        function createAlbum() {
            var formData = new FormData();
            formData.append("AlbumName", $("#txtAlbumName").val());
            formData.append("ArtistName", $("#txtAlbumArtist").val());
            formData.append("AlbumImage", $("#fileAlbumImage")[0].files[0]);

            $.ajax({
                url: '@Url.Action("CreateAlbum1", "Spot")',
                type: 'POST',
                contentType: false,
                processData: false,
                data: formData,
                success: function (result) {
                    alert('Album saved successfully');
                },
                error: function (error) {
                    console.error(error);
                }
            });
        }

        function createSong() {
            if (!duration) {
                alert("Please wait until the audio duration is loaded.");
                return;
            }

            var formData = new FormData();
            formData.append("AlbumId", $("#txtSongAlbumId").val());
            formData.append("ArtistName", $("#txtSongArtist").val());
            formData.append("SongName", $("#txtSongName").val());
            formData.append("SongFile", $("#fileSongFile")[0].files[0]);
            formData.append("SongGenres", $("#txtSongGenres").val());
            formData.append("SongImage", $("#fileSongImage")[0].files[0]);
            formData.append("SongLength", $('#durationInput').val());

            console.log(duration);

            $.ajax({
                url: '@Url.Action("CreateSong1", "Spot")',
                contentType: false,
                type: 'POST',
                processData: false,
                data: formData,
                success: function (result) {
                    alert('Song saved successfully');
                },
                error: function (error) {
                    console.error(error);
                }
            });
                }

                function clearAlbumValue() {

                    $('#albumSongForm')[0].reset();
                    $('#albumArtistSongForm')[0].reset();
                    $('#tblDataTableSongAlbum').dataTable().empty();
                    $('#tblDataTableSearchArtistSongAlbum').dataTable().empty();
                };
                //function clearValue() {
                //    $('#fileSongFile').val(null)
                //    $('#albumForm')[0].reset();
                //    $('#songForm')[0].reset();
                //    $('#tblDataTableAlbum').dataTable().empty();
                //    $('#tblDataTableSong').dataTable().empty();
                //    $('#songAudioPreview').attr('src', '#');
                //    $('#audiocontrolPreview').hide();



                //};
                function clearValue() {
                    $('#fileSongFile').val(null);
                    $('#albumForm')[0].reset();
                    $('#songForm')[0].reset();
                    $('#tblDataTableAlbum').dataTable().empty();
                    $('#tblDataTableSong').dataTable().empty();

                    // Reset audio preview
                    $('#songAudioPreview').attr('src', '#');
                    $('#audiocontrolPreview').hide();

                    // Reset image preview
                    $('#albumImagePreview').attr('src', '#').hide();
                    $('#songImagePreview').attr('src', '#').hide();

                    // Clear any text related to the duration
                    $('#duration').text('');

                }
                function bindingTableSong(songData) {

                    $('#dvTableSong').show();
                    // Initialize DataTable
                    dataTable = $('#tblDataTableSong').DataTable({

                        destroy: true, //ล้างข้อมูลก่อนหน้า
                        data: songData,
                        searching: false,
                        lengthchange: false,
                        scrollx: false,

                        paging:false,
                        info: false,

                        columns: [

                            {
                                className: 'text-center',
                                orderable: false,
                                data: null,
                                defaultContent: '<i class="fa-solid fa-edit btn-edit-song"></i>',

                            },


                            {
                                data: null, className: 'text-center', orderable: false, sortable: false,

                                render: function (data, type, row, meta) {


                                    return (meta.row + 1)
                                }
                            },
                            {
                                data: null, className: 'text-left', orderable: false,
                                render: function (data, type, row) {

                                    return data.SongName;

                                }

                            },
                            {
                                data: null, className: 'text-left', orderable: false,

                                render: function (data, type, row) {

                                    return data.ArtistName;

                                }

                            },
                            {
                                data: null, className: 'text-left', orderable: false,

                                render: function (data, type, row) {

                                    return data.AlbumId


                                }


                            },


                            {
                                data: null, className: 'text-center', orderable: false,

                                render: function (data, type, row) {

                                    var duration = data.SongLength
                                    var minutes = Math.floor(duration / 60);
                                    var seconds = Math.floor(duration % 60);

                                    // Ensure seconds are displayed with two digits
                                    var formattedSeconds = seconds < 10 ? '0' + seconds : seconds;
                                    audioDurationElement.text('Duration: ' + minutes + ':' + formattedSeconds);
                                    return duration != null ? minutes + ':' + formattedSeconds : "";

                                }

                            },
                            {
                                data: null, className: 'text-center', orderable: false,

                                render: function (data, type, row) {

                                    return data.SongGenres;

                                }

                            },
                            {
                                className: 'text-center',
                                orderable: false,
                                data: null,
                                defaultContent: '<i class="fa-solid fa-trash btn-delete"></i>',

                            }
                        ]


                    });
                    //rowCount = dataTable.rows().count();
                }



    $('#tblDataTableAlbum').on('click', '.btn-edit-album', async function () {
        SaveStatus = "Update";
        rowDataAlbum = $('#tblDataTableAlbum').DataTable().row($(this).closest('tr')).data();
        AlbumIdData = rowDataAlbum.AlbumId;
        $('#h1Album').text(rowDataAlbum.AlbumName);
        $(".nav button#albumTab").tab('show');

        async function searchSongs() {
            let frmSearch = {
                ArtistName: rowDataAlbum.ArtistName,
                AlbumId: rowDataAlbum.AlbumId
            };

            await $.ajax({
                type: 'POST',
                url: '@Url.Action("SearchSong1", "Spot")',
                data: frmSearch,
                dataType: "json",
                success: function (result) {
                    bindingTableSongAlbum(result.Data);
                    if (result.status == "S") {
                       
                    }
                    else {
                       
                    }
                },
                error: function (request, status, error) {
                    console.log(error);
                }
            });

            let frmSearchArtist = {
                ArtistName: rowDataAlbum.ArtistName,
                AlbumId: rowDataAlbum.AlbumId
            };

            await $.ajax({
                type: 'POST',
                url: '@Url.Action("SearchSongNotInAlbum1", "Spot")',
                data: frmSearchArtist,
                dataType: "json",
                success: function (result) {
                    bindingTableArtistSongAlbum(result.Data);
                    if (result.status == "S") {
                      
                    }
                    else {
                      
                    }
                },
                error: function (request, status, error) {
                    console.log(error);
                }
            });
        }

        await searchSongs();

        $('#tblDataTableSearchArtistSongAlbum ').on('click', '.btn-add', function () {
            var data = dataTable.row($(this).closest('tr')).data();
            if (this.click) {
                var formDataAddsong = new FormData();
                formDataAddsong.append("AlbumId", AlbumIdData);
                formDataAddsong.append("SongId", data.SongId);
                formDataAddsong.append("ArtistName", data.ArtistName);
                formDataAddsong.append("SongName", data.SongName);
                formDataAddsong.append("SongFilePath", data.SongFilePath);
                formDataAddsong.append("SongGenres", data.SongGenres);
                formDataAddsong.append("SongImagePath", data.SongImagePath);
                formDataAddsong.append("SongLength", data.SongLength);

                $.ajax({
                    url: '@Url.Action("AddSong123", "Spot")',
                    contentType: false,
                    type: 'POST',
                    processData: false,
                    data: formDataAddsong,
                    success: async function (result) {
                        if (result.status == "S") {
                            await searchSongs(); // Re-trigger the search after a successful update
                           
                           
                       
                        }
                    },
                    error: function (error) {
                        console.error(error);
                    }
                });
            } else {
                console.log('Unselected:', data);
            }
        });

        $('#tblDataTableSongAlbum').on('click', '.btn-remove', async function () {
            var rowDataSongAlbum = $('#tblDataTableSongAlbum').DataTable().row($(this).closest('tr')).data();

            var frmRemoveSong = {
                AlbumId: rowDataSongAlbum.AlbumId,
                SongId: rowDataSongAlbum.SongId
            };

            await $.ajax({
                type: 'POST',
                url: '@Url.Action("RemoveSong1", "Spot")',
                data: frmRemoveSong,
                dataType: "json",
                success: async function (result) {
                    if (result.status == "S") {
                   
                        await searchSongs(); // Re-trigger the search after a successful update
                  
                    }
                },
                error: function (request, status, error) {
                    console.log(error);
                }
            });
        });
    });




                      $('#tblDataTableAlbum').on('click', '.btn-delete', async function () {

          rowDataAlbum = $('#tblDataTableAlbum').DataTable().row($(this).closest('tr')).data();


          frmDelete = {
              AlbumId: rowDataAlbum.AlbumId
          }


        await  $.ajax({
              type: 'POST',
              url: '@Url.Action("DeleteAlbum1", "Spot")',
            data: frmDelete,
              dataType: "json",
              success: function (result) {

               alert("Delete Album Success")

                  /* bindingTable(result.Data); */
              },
              error: function (request, status, error) {
                  console.log(error);
              }
          });
      });








        function bindingTableAlbum(albumData) {

            $('#dvTableAlbum').show();
            // Initialize DataTable
            dataTable = $('#tblDataTableAlbum').DataTable({

                destroy: true, //ล้างข้อมูลก่อนหน้า
                data: albumData,
                searching: false,
                lengthchange: false,
                scrollx: false,
                paging: false,
                info: false,

                columns: [


                    {
                        className: 'text-center',
                        orderable: false,
                        data: null,
                        defaultContent: '<i class="fa-solid fa-edit btn-edit-album"></i>',

                    },

                    {
                        data: null, className: 'text-center', orderable: false, sortable: false,

                        render: function (data, type, row, meta) {


                            return (meta.row + 1)
                        }
                    },
                    {
                        data: null, className: 'text-left', orderable: false,
                        render: function (data, type, row) {

                            return data.AlbumName;

                        }

                    },
                    {
                        data: null, className: 'text-left', orderable: false,

                        render: function (data, type, row) {

                            return data.ArtistName;

                        }

                    },
                    {
                        className: 'text-center',
                        orderable: false,
                        data: null,
                        defaultContent: '<i class="fa-solid fa-trash btn-delete"></i>',

                    }
                ]


            });
            //rowCount = dataTable.rows().count();
                }



                function bindingTableSongAlbum(songAlbumData) {

                    $('#dvTableSongAlbum').show();
                    // Initialize DataTable
                    dataTable = $('#tblDataTableSongAlbum').DataTable({

                        destroy: true, //ล้างข้อมูลก่อนหน้า
                        data: songAlbumData,
                        searching: false,
                        lengthchange: false,
                        scrollx: false,
                        paging: false,
                        info: false,

                        columns: [



                            {
                                data: null, className: 'text-center', orderable: false, sortable: false,

                                render: function (data, type, row, meta) {


                                    return (meta.row + 1)
                                }
                            },
                            {
                                data: null, className: 'text-left', orderable: false,
                                render: function (data, type, row) {

                                    return data.SongName;

                                }

                            },
                            {
                                data: null, className: 'text-left', orderable: false,

                                render: function (data, type, row) {

                                    return data.ArtistName;

                                }

                            },



                            {
                                data: null, className: 'text-center', orderable: false,

                                render: function (data, type, row) {

                                    var duration = data.SongLength
                                    var minutes = Math.floor(duration / 60);
                                    var seconds = Math.floor(duration % 60);

                                    // Ensure seconds are displayed with two digits
                                    var formattedSeconds = seconds < 10 ? '0' + seconds : seconds;
                                    audioDurationElement.text('Duration: ' + minutes + ':' + formattedSeconds);
                                    return duration != null ? minutes + ':' + formattedSeconds : "";

                                }

                            },
                            {
                                data: null, className: 'text-center', orderable: false,

                                render: function (data, type, row) {

                                    return data.SongGenres;

                                }

                            },

                            {
                                className: 'text-center',
                                orderable: false,
                                data: null,
                                defaultContent: '<i class="fa-solid fa-delete btn-remove">remove</i>',

                            }
                        ]


                    });
                    //rowCount = dataTable.rows().count();
                }


                function bindingTableArtistSongAlbum(songAlbumData) {
                    $('#dvSearchArtistSongAlbum').show();

                    // Initialize DataTable
                    dataTable = $('#tblDataTableSearchArtistSongAlbum').DataTable({
                        destroy: true, // Clear previous data
                        data: songAlbumData,
                        searching: false,
                        lengthchange: false,
                        scrollx: false,
                        info: false,
                        paging: false,
                        columns: [
                           
                            {
                                data: null, className: 'text-center', orderable: false, sortable: false,
                                render: function (data, type, row, meta) {
                                    return (meta.row + 1);
                                }
                            },
                            {
                                data: null, className: 'text-left', orderable: false,
                                render: function (data, type, row) {
                                    return data.SongName == null ? "" : data.SongName;
                                }
                            },
                            {
                                data: null, className: 'text-left', orderable: false,
                                render: function (data, type, row) {
                                    return data.ArtistName == null ? "" : data.ArtistName;
                                }
                            },
                            {
                                data: null, className: 'text-center', orderable: false,
                                render: function (data, type, row) {
                                    var duration = data.SongLength;
                                    var minutes = Math.floor(duration / 60);
                                    var seconds = Math.floor(duration % 60);
                                    var formattedSeconds = seconds < 10 ? '0' + seconds : seconds;
                                    return duration != null ? minutes + ':' + formattedSeconds : "";
                                }
                            },
                            {
                                data: null, className: 'text-center', orderable: false,
                                render: function (data, type, row) {
                                    return data.SongGenres == null ? "" : data.SongGenres;
                                }
                            },

                            {
                                className: 'text-center',
                                orderable: false,
                                data: null,
                                defaultContent: '<i class="fa-solid fa-delete btn-add">Add Song</i>',

                            }
                        ]
                    });

                }

            </script>
        }
